package bot

import (
	"fmt"
	"strings"
	"log"

	"github.com/Fr11zy/WordleBot/internal/game"
	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
)

func handleStart(ctx *th.Context, update telego.Update) error {
	chatID := update.Message.Chat.ID
	_, err := ctx.Bot().SendMessage(ctx, tu.Message(
		tu.ID(chatID),
		fmt.Sprint("–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ–∂–µ–¥–µ–≤–Ω—ã—Ö Wordle –æ—Ç New York Times, –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n"+
			"–Ø –±—É–¥—É –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è —Ç–≤–æ–π —Ñ–∏–¥–±—ç–∫ –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Å–ª–æ–≤–∞.\n"+
			"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ Wordle, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /solve.\n"+
			"–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –ø—Ä–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ Wordle –≥–¥–µ-—Ç–æ –∑–∞—Å—Ç—Ä—è–ª - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help."),
	))
	return err
}

func handleHelp(ctx *th.Context, update telego.Update) error {
	chatID := update.Message.Chat.ID
	if err := game.StartGame(chatID, "HELP"); err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		))
		return err
	}
	_, err := ctx.Bot().SendMessage(ctx, tu.Message(
		tu.ID(chatID),
		fmt.Sprint("–¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞? - –û—Ç–ª–∏—á–Ω–æ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: `TRAIN` `bygbb` (–∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ—á–∫–µ):\n"+
			"üü© (G) ‚Äî –±—É–∫–≤–∞ –Ω–∞ –º–µ—Å—Ç–µ\n"+
			"üü® (Y) ‚Äî –±—É–∫–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ç—É—Ç\n"+
			"‚¨õÔ∏è (B) ‚Äî –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ\n\n"),
	))
	return err
}

func handleSolve(ctx *th.Context, update telego.Update) error {
	chatID := update.Message.Chat.ID

	if err := game.StartGame(chatID, "SOLVE"); err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		))
		return err
	}

	firstGuess := game.GetOptimalFirstWord()
	if err := game.UpdateLastGuess(chatID, firstGuess); err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /solve.",
		))
		return err
	}

	_, err := ctx.Bot().SendMessage(ctx, tu.Message(
		tu.ID(chatID),
		fmt.Sprintf("–ù–∞—á–∏–Ω–∞–µ–º Wordle! –ú–æ–π –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: **%s**\n\n"+
			"–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Ñ–∏–¥–±—ç–∫ –ø–æ –º–æ–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ `GYBBG`:\n"+
			"üü© (G) ‚Äî –±—É–∫–≤–∞ –Ω–∞ –º–µ—Å—Ç–µ\n"+
			"üü® (Y) ‚Äî –±—É–∫–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ç—É—Ç\n"+
			"‚¨õÔ∏è (B) ‚Äî –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ\n\n"+
			"–ï—Å–ª–∏ —Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ, –Ω–∞–ø–∏—à–∏ `Guess`.\n"+
			"–ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –Ω–∞–ø–∏—à–∏ `Notfound`.\n"+
			"–ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –Ω–∞–ø–∏—à–∏ `Lose`.",
			firstGuess),
	))
	return err
}

func handleFeedBack(ctx *th.Context, update telego.Update) error {
	if update.Message.Text == "" || update.Message.Text[0] == '/' {
		return nil
	}

	chatID := update.Message.Chat.ID
	input := strings.TrimSpace(strings.ToUpper(update.Message.Text))

	gameState, exists := game.GetGame(chatID)
	if !exists || !gameState.IsActive {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /solve –∏–ª–∏ /help –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.",
		))
		return err
	}

	switch gameState.Mode {
	case "SOLVE":
		return handleSolveFeedBack(ctx, chatID, input)
	case "HELP":
		return handleHelpFeedBack(ctx, chatID, input)
	case "CHILL":
		{
			_, err := ctx.Bot().SendMessage(ctx, tu.Message(
				tu.ID(chatID),
				fmt.Sprint("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–¥—ã—Ö–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–¥–∞—á.\n"+
					"–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã start, solve –∏–ª–∏ help."),
			))
			return err
		}
	}
	return nil
}

func handleHelpFeedBack(ctx *th.Context, chatID int64, input string) error {
	handled := handleSpecialFeedback(ctx, chatID, input)
	if handled {
		return nil
	}

	lines := strings.Split(input, "\n")
	if len(lines) == 0 {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–ª–æ–≤–∞ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ `TRAIN-bygbb`, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.",
		))
		return err
	}

	if err := game.IncrementAttempts(chatID, len(lines)); err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /help.",
		))
		return err
	}
	
	var validInputs [][]string
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			continue
		}
		parts := strings.Split(line, " ")
		if len(parts) != 2 || len(parts[0]) != 5 || len(parts[1]) != 5 {
			_, err := ctx.Bot().SendMessage(ctx, tu.Message(
				tu.ID(chatID),
				fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: `%s`. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç `TRAIN bygbb`.", line),
			))
			return err
		}

		word := parts[0]
		feedback := parts[1]

		if !game.IsValidWord(word) || !game.IsValidFeedBack(feedback) {
			_, err := ctx.Bot().SendMessage(ctx, tu.Message(
				tu.ID(chatID),
				fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ–∏–¥–±—ç–∫: `%s-%s`. –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 –±—É–∫–≤, —Ñ–∏–¥–±—ç–∫ ‚Äî gybbg.", word, feedback),
			))
			return err
		}
		validInputs = append(validInputs, []string{word, feedback})
	}

	filtered, err := game.FilterWords(chatID, validInputs)
	if err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /help.",
		))
		return err
	}

	if len(filtered) == 0 {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –≤–≤–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /help.",
		))
		if err != nil {
			return err
		}
		if err := game.EndGame(chatID); err != nil {
			return err
		}
		return nil
	}

	Guess := game.ChooseNext(filtered)

	if err := game.UpdateGameState(chatID, filtered, Guess); err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /help.",
		))
		return err
	}

	attempt, err := game.GetAttempts(chatID)
	if err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /help.",
		))
		return err
	}

	_, err = ctx.Bot().SendMessage(ctx, tu.Message(
		tu.ID(chatID),
		fmt.Sprintf("–ú–æ—è –ø–æ–¥—Å–∫–∞–∑–∫–∞: **%s**(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–±–µ–¥—ã: %d)\n\n"+
			"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ñ–∏–¥–±—ç–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `TRAIN bygbb` –∏–ª–∏ guess, –µ—Å–ª–∏ —è —É–≥–∞–¥–∞–ª.", Guess, 6-attempt),
	))
	
	return err
}

func handleSolveFeedBack(ctx *th.Context, chatID int64, feedback string) error {
	handled := handleSpecialFeedback(ctx, chatID, feedback)
	if handled {
		return nil
	}

	if !game.IsValidFeedBack(feedback) {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π GYBBG (–Ω–∞–ø—Ä–∏–º–µ—Ä, GYBBG) –∏–ª–∏ Guess.",
		))
		return err
	}

	filtered, err := game.FilterSingleWord(chatID, feedback)
	if err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /solve.",
		))
		return err
	}
	giveNextGuess(ctx, chatID, filtered)
	return nil
}


func handleSpecialFeedback(ctx *th.Context, chatID int64, feedback string) bool {
	switch feedback {
	case "NOTFOUND":
		{
			if err := game.FilteredOutLastGuess(chatID); err != nil {
				_, err := ctx.Bot().SendMessage(ctx, tu.Message(
				tu.ID(chatID),
				"–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.",
			))
			if err != nil {
				log.Printf("Failed to send error message for chat %d: %v", chatID, err)
			}
			return true
			}
			giveNextGuess(ctx, chatID, game.GetPossibleWords(chatID))
			return true
		}
	case "LOSE":
		{
			_, err := ctx.Bot().SendMessage(ctx, tu.Message(
				tu.ID(chatID),
				"–≠—Ö, –ø—Ä–æ–∏–≥—Ä—ã—à. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —è –ø–æ–∫–∞–∂—É –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω!"))
			if err != nil {
				log.Printf("Failed to send lose message for chat %d: %v", chatID, err)
			}
			if err := game.EndGame(chatID); err != nil {
				log.Printf("Failed to end game for chat %d: %v", chatID, err)
			}
			return true
		}
	case "GUESS":
		{
			_, err := ctx.Bot().SendMessage(ctx, tu.Message(
				tu.ID(chatID),
				"–Ø —Ä–∞–¥, —á—Ç–æ —Å–º–æ–≥ —Ç–µ–±–µ –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å wordle!",
			))
			if err != nil {
				log.Printf("Failed to send guess success message for chat %d: %v", chatID, err)
			}
			if err := game.EndGame(chatID); err != nil {
			log.Printf("Failed to end game for chat %d: %v", chatID, err)
			}
			return true
		}
	}
	return false
}

func giveNextGuess(ctx *th.Context, chatID int64, filtered []string) {
	if len(filtered) == 0 {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ–≤. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ /solve.",
		))
		if err != nil {
			log.Printf("Failed to send no matching words message for chat %d: %v", chatID, err)
		}
		if err := game.EndGame(chatID); err != nil {
			log.Printf("Failed to end game for chat %d: %v", chatID, err)
		}
		return
	}

	nextGuess := game.ChooseNext(filtered)

	if err := game.UpdateGameState(chatID, filtered, nextGuess); err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ /solve.",
		))
		if err != nil {
			log.Printf("Failed to send error message for chat %d: %v", chatID, err)
		}
		return
	}

	mode, err := game.GetMode(chatID)
	if err != nil {
		_, err := ctx.Bot().SendMessage(ctx,tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
		))
		if err != nil {
			log.Printf("Failed to send error message for chat %d: %v", chatID, err)
		}
		return
	}

	attempt, err := game.GetAttempts(chatID)
	if err != nil {
		_, err := ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(chatID),
			"–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /help.",
		))
		if err != nil {
			log.Printf("Failed to send error message for chat %d: %v", chatID, err)
		}
		return
	}

	var message string
	switch mode {
	case "SOLVE":
		message = fmt.Sprintf("–ú–æ—è %d-–∞—è –¥–æ–≥–∞–¥–∫–∞: **%s**", attempt, nextGuess)
	case "HELP":
		message = fmt.Sprintf("–ú–æ—è –ø–æ–¥—Å–∫–∞–∑–∫–∞: **%s**(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–±–µ–¥—ã: %d)\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ñ–∏–¥–±—ç–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `TRAIN bygbb` –∏–ª–∏ guess, –µ—Å–ª–∏ —è —É–≥–∞–¥–∞–ª.", nextGuess, 5-attempt)
	}

	_, err = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(chatID), message))
	if err != nil {
		log.Printf("Failed to send nect guess message for chat %d: %v", chatID, err)
	}
}